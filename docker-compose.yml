# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
version: '3.7'

# Define services
services:
  # App backend service
  api:
    #    # Configuration for building the docker image for the backend service
    #    build:
    #      context: polling-app-server # Use an image built from the specified dockerfile in the `polling-app-server` directory.
    #      dockerfile: Dockerfile
    image: tillkuhn/angkor:${api_version}
    container_name: api
    # make sure vars are defined in .env which is loaded implicitly
    #  docker-compose config will show the resolved application config
    environment:
      SPRING_DATASOURCE_URL: ${db_url}
      SPRING_DATASOURCE_USERNAME: ${db_username}
      SPRING_DATASOURCE_PASSWORD: ${db_password}
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    networks:
      - api-ui

networks:
  api-ui:

      #https://docs.docker.com/compose/environment-variables/#the-env-file

      #    # Configuration for building the docker image for the backend service
      #    build:
      #      context: polling-app-server # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      #      dockerfile: Dockerfile

      #version: '2.1'
      #services:
      #  #...
      #  localstack:
      #    image: localstack/localstack
      #    ports:
      #      # S3 at http://localhost:4572
      #      # SNS at http://localhost:4575
      #      # SQS at http://localhost:4576
      #      # DynamoDB at http://localhost:4569
      #      # host-port:container-port
      #      - "4572:4572"
      #      - "8000:4569"
      #      - "9000:${PORT_WEB_UI-8080}"
      #    environment:
      #      - SERVICES=s3,dynamodb
      #      - DEBUG=${DEBUG- }
      #      - DATA_DIR=/tmp/localstack/data
      #      - PORT_WEB_UI=${PORT_WEB_UI- }
      #   #   - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }
      #   #   - KINESIS_ERROR_PROBABILITY=${KINESIS_ERROR_PROBABILITY- }
      #      - DOCKER_HOST=unix:///var/run/docker.sock
      #    volumes:
      #      - "/private$TMPDIR:/tmp/localstack"

      ## AWS_PROFILE=localstack aws dynamodb --endpoint-url  http://localhost:8000 scan --table-name letsgo2-place
      ## AWS_PROFILE=localstack aws s3 --endpoint-url http://localhost:4572  mb s3://letsgo2-data
      ## http://localhost:9000/#!/infra

      ## export import
      ##!/usr/bin/env bash
      #export AWS_PROFILE=localstack
      #aws dynamodb scan --limit 25 --table-name origin-place |  jq '{"new-place": [.Items[] | {PutRequest: {Item: .}}]}' >new-place.json
      #aws dynamodb create-table --endpoint-url http://localhost:8000 --table-name new-place --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1
      #aws dynamodb batch-write-item --endpoint-url http://localhost:8000 --request-items file://new-place.json
      #aws dynamodb batch-write-item --endpoint-url http://localhost:8000 --request-items file://letsgo2-place.json
