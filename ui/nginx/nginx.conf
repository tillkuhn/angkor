# full example:
# https://www.nginx.com/resources/wiki/start/topics/examples/full/#nginx-conf
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
  worker_connections 1024;
}

http {
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile            on;
  tcp_nopush          on;
  tcp_nodelay         on;
  keepalive_timeout   65;
  types_hash_max_size 2048;

  include             /etc/nginx/mime.types;
  default_type        application/octet-stream;

  # Load modular configuration files from the /etc/nginx/conf.d directory.
  # See http://nginx.org/en/docs/ngx_core_module.html#include
  # for more information.
  include /etc/nginx/conf.d/*.conf;

  server {
    listen       80 default_server;
    listen       [::]:80 default_server;
    server_name  _;
    root         /usr/share/nginx/html;

    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf;

    location / {
    }

    error_page 404 /404.html;
    location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    }
  }

  server {
    server_name ${DOMAIN_NAME}; # managed by Certbot

    ## this should contain the extracted webapp
    root         /www;

    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf;

    ## proxy selected pathes to spring boot backend
    ## check also https://stackoverflow.com/questions/40597051/jhipster-dev-profile-reverse-proxy
    ## and https://www.jhipster.tech/separating-front-end-and-api/
    ## /api /management /swagger-resources  /v2 /auth plus /oauth2 and /login

    location /api/ {
      proxy_pass http://${API_HOST}:${API_PORT}/api/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      break;
    }

    location /auth/ {
      proxy_pass http://${API_HOST}:${API_PORT}/auth/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      break;
    }
    location /oauth2/ {
      proxy_pass http://${API_HOST}:${API_PORT}/oauth2/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      break;
    }
    location /login/ {
      proxy_pass http://${API_HOST}:${API_PORT}/login/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      break;
    }

    ## add cache headers where appropriate
    location ~* ^.+\.(jpg|jpeg|png|gif|swf|svg|ico|mp4|eot|ttf|otf|woff|woff2|css|js)$ {
      add_header Cache-Control "max-age=86400, must-revalidate, s-maxage=2592000";
    }

    # Cheap health check example
    location /alive {
      #access_log off;
      default_type application/json;
      return 200 '{"status":"OK", "message": "I am healthy, thanks for asking"}';
    }

    ## serve the rest of the stuff
    location / {
      expires -42;
      add_header Pragma "no-cache";
      add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
      try_files $uri$args $uri$args/ $uri $uri/ /index.html =404;
    }

    error_page 404 /404.html;
    location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    }

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ## from volume meaounts
    ssl_certificate /etc/ssl/certs/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/ssl/certs/privkey.pem; # managed by Certbot
    ## from Dockerfile
    include /etc/nginx/options-ssl-nginx.conf; # managed by Certbot
    # https://forum.frank-mankel.org/topic/144/let-s-encrypt-installieren/2
    # openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048  2>/dev/null takes about 30s
    ssl_dhparam /etc/ssl/certs/dhparam.pem; # managed by Certbot
    #ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
  }

  server {
    if ($host = ${DOMAIN_NAME}) {
      return 301 https://$host$request_uri;
    } # managed by Certbot
    listen       80 ;
    listen       [::]:80 ;
    server_name ${DOMAIN_NAME};
    return 404; # managed by Certbot
  }
}
