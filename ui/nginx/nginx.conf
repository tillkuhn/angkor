# full example:
# https://www.nginx.com/resources/wiki/start/topics/examples/full/#nginx-conf
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
  # the maximum number of connections that each worker process can handle simultaneously. The default is 512
  worker_connections 256;
}

http {
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile            on;
  tcp_nopush          on;
  tcp_nodelay         on;
  keepalive_timeout   65;
  types_hash_max_size 2048;

  include             /etc/nginx/mime.types;
  default_type        application/octet-stream;

  # Load modular configuration files from the /etc/nginx/conf.d directory.
  # See http://nginx.org/en/docs/ngx_core_module.html#include
  # for more information.
  include /etc/nginx/conf.d/*.conf;

  ## Server on port 80, only used to enforce ssl and redirect to https
  server {
    server_name ${SERVER_NAMES};
    # hack for multipe conditions https://gist.github.com/jrom/1760790
    # match is case insensitive. pattern should the shared parts of the domain e.g. mydomain.net
    #if ($host ~* ${SERVER_NAME_PATTERN}) {
    #  return 301 https://$host$request_uri;
    #}
    listen       80 ;
    listen       [::]:80 ;
    return 301 https://$host$request_uri;
  }

  # the actual server on ssl port 443
  server {
    # SERVER_NAMES is space separates, can also be only one
    #e.g. "mdomain.net xxx.mydomain.net"
    server_name ${SERVER_NAMES}; # managed by Certbot

    ## this folder should our static webfiles
    root         /www;

    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf;

    # Proxy to Backend. The server(s) that Nginx proxies requests to are known as upstream servers.
    # See also: https://stackoverflow.com/questions/40597051/jhipster-dev-profile-reverse-proxy
    # See also: https://www.jhipster.tech/separating-front-end-and-api/
    # See also: https://www.digitalocean.com/community/tutorials/understanding-nginx-http-proxying-load-balancing-buffering-and-caching
    # IMPORTANT: Make sure the pathes are also listed in src/proxy.conf.js for local development

    location /api/ {
      proxy_pass http://${API_HOST}:${API_PORT}/api/;
      include /etc/nginx/options-proxy-nginx.conf;
      break;
    }

    location /auth/ {
      proxy_pass http://${API_HOST}:${API_PORT}/auth/;
      include /etc/nginx/options-proxy-nginx.conf;
      break;
    }

    location /oauth2/ {
      proxy_pass http://${API_HOST}:${API_PORT}/oauth2/;
      include /etc/nginx/options-proxy-nginx.conf;
      break;
    }

    location /login/ {
      proxy_pass http://${API_HOST}:${API_PORT}/login/;
      include /etc/nginx/options-proxy-nginx.conf;
      break;
    }

    # currenlty expose only health endpoint via nginx, protect the others
    location /actuator/health {
      access_log off;
      proxy_pass http://${API_HOST}:${API_PORT}/actuator/health;
      include /etc/nginx/options-proxy-nginx.conf;
      break;
    }

    # Cheap health check example
    location /alive {
      access_log off;
      default_type application/json;
      return 200 '{"status":"OK", "message": "NGINX is healthy, thanks for asking"}';
    }

    # healthchecker frontend ... prefix path will be removed
    # https://serverfault.com/questions/562756/how-to-remove-the-path-with-an-nginx-proxy-pass
    location /${HEALTHBELLS_HOST} {
      return 302 /${HEALTHBELLS_HOST}/;
    }

    location /${HEALTHBELLS_HOST}/ {
      proxy_pass http://${HEALTHBELLS_HOST}:${HEALTHBELLS_PORT}/;  # note the trailing slash here, it matters!
      include /etc/nginx/options-proxy-nginx.conf;
      break;
    }

    # healthchecker frontend ... prefix path will be removed
    # https://serverfault.com/questions/562756/how-to-remove-the-path-with-an-nginx-proxy-pass
    location /${IMAGINE_HOST} {
      return 302 /${IMAGINE_HOST}/;
    }

    # matches any query beginning with /IMAGINE_HOST/ and halts searching, so regular expressions will NOT be checked.
    location ^~ /${IMAGINE_HOST}/ {
      proxy_pass http://${IMAGINE_HOST}:${IMAGINE_PORT}/;  # note the trailing slash here, it matters!
      include /etc/nginx/options-proxy-nginx.conf;
      break;
    }

    # add cache headers where appropriate. note that ONLY ONE BLOCK CAN MATCH so this should match after proxy_pass blocks
    # matches any request ending in gif, jpg, or jpeg etc.
    # https://stackoverflow.com/questions/5238377/nginx-location-priority
    location ~* ^.+\.(jpg|jpeg|png|gif|swf|svg|ico|mp4|eot|ttf|otf|woff|woff2|css|js)$ {
      add_header Cache-Control "max-age=86400, must-revalidate, s-maxage=2592000";
    }

    ## serve the rest of the stuff, avoid caching of root path
    location / {
      expires -42;
      add_header Pragma "no-cache";
      add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
      try_files $uri$args $uri$args/ $uri $uri/ /index.html =404;
    }

    error_page 404 /404.html;
    location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    }

    listen [::]:443 ssl ipv6only=on;
    listen 443 ssl;
    ## these should be exposed through volume mounts
    ssl_certificate /etc/ssl/certs/fullchain.pem; # should be managed by Certbot
    ssl_certificate_key /etc/ssl/certs/privkey.pem; # should be managed managed by Certbot
    ## from Dockerfile
    include /etc/nginx/options-ssl-nginx.conf; # ssl specific options such as ssl_session_timeout
    # https://forum.frank-mankel.org/topic/144/let-s-encrypt-installieren/2
    # openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048  2>/dev/null takes about 30s
    ssl_dhparam /etc/ssl/certs/dhparam.pem; # managed by cloud init script
  }

}
