# File: gradle/libs.versions.toml "Gradle version catalogs for an awesome dependency management"
#
# * https://proandroiddev.com/gradle-version-catalogs-for-an-awesome-dependency-management-f2ba700ff894 (Gradle version catalogs for an awesome dependency management)
# * https://medium.com/@vladyslav.hontar/dependabot-in-action-d9b56b2be86c (How to use Dependabot with Gradleâ€™s Version Catalog)
# * https://blog.jdriven.com/2022/11/gradle-goodness-defining-plugin-versions-using-version-catalog/ (Gradle Goodness: Defining Plugin Versions Using Version Catalog)
# * https://blog.jdriven.com/2022/11/gradle-goodness-grouping-version-catalog-dependencies-into-bundles/ (Gradle Goodness: Grouping Version Catalog Dependencies Into Bundles)
#
# "We can replace these plugin references with version catalog defined values. First we must create the file
# gradle/libs.version.toml in our project directory. We might already have such file with definitions for the
# dependencies we use in our build and tests.
# Next we must add a section [plugins] where we can define our plugin dependencies.
# We can use the full power of the version catalog here, the only thing we need to remember is to use the
# id property of we use the longer notation option. With the shorthand notation we can simply define a string value
# with the id of the plugin, a colon : and the version."
#
# You can use separators such as -, _, . that will be normalized
# by Gradle to . in the catalog and allow you to create subsections.

[versions]
# 'versions' is used to declare the version numbers that will be referenced later by plugins and libraries.
# can be used as version.ref in [plugins] and [libraries] section, see flyway-core example below
archunit = "1.3.0" 
bucket4j = "8.0.1"
commons-lang = "3.17.0"
flyway = "10.20.1"
greenmail = "2.1.2"
hypersistence = "3.9.0"
# jackson: avoid "2.16.1" with spring 3.2.2 (issues with .sonMappingException at JacksonModule.scala:61)
# Check spring boot dependency table for supported version, e.g. https://docs.spring.io/spring-boot/appendix/dependency-versions/coordinates.html
jackson =  "2.17.2"
jacoco = "0.8.11"  # used like "toolVersion = libs.versions.jacoco.get()" in build.gradle.kts jacoco block
kotlin = "2.0.21"
micrometer = "1.13.6"
mockito = "5.2.0"
postgresql = "42.7.4"
rome = "2.1.0"
spring-boot = "3.3.5"
spring-dep-mgmt = "1.1.6"
spring-kafka = "3.2.4"
spring-security  = "6.3.4"
wiremock = "3.0.1"

[plugins]
# 'plugins' were added in Gradle 7.2, and are used (obviouly) to define plugins.
# Use like "alias(libs.plugins.spring.boot)" in build.gradle.kts plugins section
# Longer notation option where we set the id and version for the plugin.
flyway-plugin = { id = "org.flywaydb.flyway", version.ref = "flyway" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dep-mgmt = { id = "io.spring.dependency-management", version.ref = "spring-dep-mgmt" }
# last sonar 4.x version: 4.4.1.3373, 5.x: "5.0.0.4638"
sonarqube = { id = "org.sonarqube", version = "5.0.0.4638" } 
# alternative shorthand notation with the plugin id and version as one string
versions = "com.github.ben-manes.versions:0.51.0"

[libraries]
# 'libraries' that will be later accessed in our Gradle files.
# use like "implementation(libs.flyway.core)" in build.gradle.kts dependencies section
# replace hyphens in name with dots: flyway-core -> flyway.core

bucket4j = { module = "com.github.vladimir-bukhtoyarov:bucket4j-core", version.ref = "bucket4j" }
commons-lang3 = { module = "org.apache.commons:commons-lang3", version.ref = "commons-lang" }

# flyway libs, combined into a bundle in the "bundles" section (scroll down)
flyway-core = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
# flyway db vendor specific module since v10, see https://github.com/flyway/flyway/issues/3780
flyway-postgresql = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flyway" }

# make sure to align module AND version with the hibernate version used by Spring Boot (Releases Notes)
# Example: Spring Boot 3.2 uses Hibernate 6.3, so the module is hypersistence-utils-hibernate-63
hypersistence-utils-hibernate = { module = "io.hypersistence:hypersistence-utils-hibernate-63", version.ref = "hypersistence" }
# jackaon: use bundle and manage jackson version explicitly so we have more up2date versions compared with spring
# alternative: https://stackoverflow.com/questions/25184556/how-to-make-sure-spring-boot-extra-jackson-modules-are-of-same-version
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson-module-afterburner = { module = "com.fasterxml.jackson.module:jackson-module-afterburner", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-dataformat-yaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }

micrometer-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometer" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
rome-core = { module = "com.rometools:rome", version.ref = "rome" }
rome-modules = { module = "com.rometools:rome-modules", version.ref = "rome" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref="spring-boot"}
spring-boot-starter-cache = { module = "org.springframework.boot:spring-boot-starter-cache", version.ref="spring-boot"}
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa", version.ref="spring-boot"}
spring-boot-starter-json = { module = "org.springframework.boot:spring-boot-starter-json", version.ref="spring-boot"}
spring-boot-starter-mail = { module = "org.springframework.boot:spring-boot-starter-mail", version.ref="spring-boot"}
spring-boot-starter-oauth2-client = { module = "org.springframework.boot:spring-boot-starter-oauth2-client", version.ref="spring-boot"}
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation", version.ref="spring-boot"}
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref="spring-boot"}
spring-kafka = { module = "org.springframework.kafka:spring-kafka", version.ref="spring-kafka" }
unirest = { module = "com.mashape.unirest:unirest-java", version = "1.4.9" }

# Plugins for buildscript section (but they are technically also libraries)
kotlin-gradle-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kotlin-all-open = { module = "org.jetbrains.kotlin:kotlin-allopen", version.ref = "kotlin" }

# Test Implementation Libraries
archunit-api = { module = "com.tngtech.archunit:archunit-junit5-api", version.ref = "archunit" }
archunit-engine = { module = "com.tngtech.archunit:archunit-junit5-engine", version.ref = "archunit" }
greenmail = { module = "com.icegreen:greenmail", version.ref = "greenmail" }
mockito-inline = { module = "org.mockito:mockito-inline", version.ref = "mockito" }
spring-boot-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "spring-boot" }
spring-kafka-test = { module = "org.springframework.kafka:spring-kafka-test", version.ref="spring-kafka" }
spring-security-test = { module = "org.springframework.security:spring-security-test", version.ref="spring-security" }
# wiremock: use standalone b/c of issue "jetty 12 / springboot 3.2 #2395" https://github.com/wiremock/wiremock/issues/2395
wiremock = { module = "com.github.tomakehurst:wiremock-standalone", version.ref = "wiremock" } # 3.0.0-beta-10


[bundles]
# 'bundles' to group libaries together, so we can use them like "libs.bundles.flyway"
# See https://blog.jdriven.com/2022/11/gradle-goodness-grouping-version-catalog-dependencies-into-bundles/
flyway = ["flyway-core", "flyway-postgresql"]
jackson = ["jackson-module-kotlin","jackson-module-afterburner","jackson-databind","jackson-dataformat-yaml","jackson-datatype-jsr310"]
rome = ["rome-core", "rome-modules"]
