# Gradle Goodness: Defining Plugin Versions Using Version Catalog
# * https://proandroiddev.com/gradle-version-catalogs-for-an-awesome-dependency-management-f2ba700ff894
# * https://blog.jdriven.com/2022/11/gradle-goodness-defining-plugin-versions-using-version-catalog/
# * https://medium.com/@vladyslav.hontar/dependabot-in-action-d9b56b2be86c
# * https://blog.jdriven.com/2022/11/gradle-goodness-grouping-version-catalog-dependencies-into-bundles/
#
# "We can replace these plugin references with version catalog defined values. First we must create the file
# gradle/libs.version.toml in our project directory. We might already have such file with definitions for the
# dependencies we use in our build and tests. Next we must add a section [plugins] where we can define our plugin
# dependencies. We can use the full power of the version catalog here, the only thing we need to remember is to use the
# id property of we use the longer notation option. With the shorthand notation we can simply define a string value
# with the id of the plugin, a colon : and the version."
#
# You can use separators such as -, _, . that will be normalized
# by Gradle to . in the catalog and allow you to create subsections.
# File: gradle/libs.versions.toml


# versions is used to declare the version numbers that will be referenced later by plugins and libraries.
[versions]
# Define version we can use as version.ref in [plugins] and [libraries], see flyway-core example below
# CAUTION: 9.22.3 causes "Unsupported class file major v 63 (Java 19)" with Java 17
# 10.4.1 newest causes  java.lang.NoSuchMethodError at FlywayAutoConfiguration.java:254
flyway = "10.4.1"
postgresql="42.7.1"
jacoco = "0.8.11"
wiremock = "3.0.1"

#     implementation("io.hypersistence:hypersistence-utils-hibernate-62:$hypersistenceUtilsVersion") // https://vladmihalcea.com/how-to-map-java-and-sql-arrays-with-jpa-and-hibernate/

# plugins Were added in Gradle 7.2, are used (obviouly) to define plugins.
[plugins]
# We can use shorthand notation with the plugin id and version.
# use like "alias(libs.plugins.spring.boot)" in  build.gradle.kts plugins section
spring-boot = "org.springframework.boot:3.2.0"  # 3.1.5

# We can use the longer notation option where we set
# the id and version for the plugin.
spring-dep-mgmt = { id = "io.spring.dependency-management", version = "1.1.4" }

# Here we use the longer notation and version.ref to reference
# the version defined in the [versions] section.
flyway-plugin = { id = "org.flywaydb.flyway", version.ref = "flyway" }

# Define the libraries that will be later accessed in our Gradle files.
# use like "implementation(libs.flyway.core)" in build.gradle.kts dependencies section
# replace hyphens in name with dots: flyway-core -> flyway.core
[libraries]
flyway-core = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
# since v10 we need vendor specific module, see https://github.com/flyway/flyway/issues/3780
flyway-postgresql = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flyway" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
# make sure to align module AND version with the hibernate version used by Spring Boot (Releases Notes)
# Example: Spring Boot 3.2 uses Hibernate 6.3, so the module is hypersistence-utils-hibernate-63
hypersistence-utils-hibernate = { module = "io.hypersistence:hypersistence-utils-hibernate-63", version="3.7.0"}

# testImplementation
# testImplementation( "com.github.tomakehurst:wiremock:$wiremockVersion")
# Use standalone b/c of issue "jetty 12 / springboot 3.2 #2395" https://github.com/wiremock/wiremock/issues/2395
wiremock = { module= "com.github.tomakehurst:wiremock-standalone", version="3.0.1"} # 3.0.0-beta-10

# bundles? maybe coming soon. maybe not
