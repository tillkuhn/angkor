# General properties, may be overwritten by specific profile or via Environment
# or via config/application.properties in root folder (not versioned)

# see config.AppProperties
app:
  api-token: sieam-reap # only for local testing
  tour-api-base-url: https://dummy.org
  osm-api-base-url: https://nominatim.openstreetmap.org
  tours:
    # on prod, ~/upload is docker-mounted to /tmp/upload
    import-folder: /tmp/upload

logging:
  level:
    ROOT: INFO
    # of course our packages are allowed to log in debug mode by default as they are not super verbose
    net.timafe.angkor: DEBUG
    # X509Certificate: Alg:SHA256withRSA (when interacting with cognito)
    jdk.event.security: INFO
    # Apaches http client is also very verbose in debug mode
    org.apache.http: INFO
    # overwrite pattern? https://www.baeldung.com/spring-boot-logging,
    # https://www.logicbig.com/tutorials/spring-framework/spring-boot/logging-console-pattern.html
    # default: see DefaultLogbackConfiguration class
    org.apache.kafka.clients: WARN
    org.apache.kafka.common: WARN
    # avoid Bean X of type Y is not eligible for getting processed by all BeanPostProcessors for some flyway / async beans
    org.springframework.context.support.PostProcessorRegistrationDelegate: WARN
  pattern:
    # https://www.logicbig.com/tutorials/spring-framework/spring-boot/logging-console-pattern.html
    # http://logback.qos.ch/manual/layouts.html#ClassicPatternLayout
    # %clr(%d{yyyy-MM-dd HH:mm:ss}){faint} (localtime) but Let's log UTC
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss'Z', UTC}){faint} %clr(%5p){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"

# https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html
management:
  endpoints:
    web:
      exposure:
        include: info,health,metrics
  endpoint:
    # https://www.callicoder.com/spring-boot-actuator/#displaying-detailed-health-information
    health:
      show-details: always

server:
  error:
    # enable for nonprod: Starting from the 2.3 version, Spring Boot doesn't include an error
    # message on the default error page. The reason is to reduce the risk of leaking information to a client
    include-message: always
  forward-headers-strategy: native # avoid redirect issues with OAuth2 redirectUriTemplate https urls
  # https://stackoverflow.com/questions/44491257/how-to-reduce-spring-boot-memory-usage
  port: 8080
  servlet:
    session:
      timeout: 12h # http session timeout default is 30 min
  tomcat:
    threads:
      max: 20

spring:
  application:
    name: angkor-api
  datasource:
    # set env SPRING_DATASOURCE_URL= jdbc:postgres://host:5432/dbname, same with USERNAME and PASSWORD
    driver-class-name: org.postgresql.Driver
    hikari:
      # ElephantSQL only supports 5 concurrent connections, so we use small pool sizes
      maximum-pool-size: 3 # SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: "2"
      minimum-idle: 2 # SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: "2"
  jpa:
    database: postgresql
    generate-ddl: false # we rely on flyway
    hibernate:
      ddl-auto: none # none, validate, update, create-drop.
    open-in-view: false # to disable database queries may be performed during view rendering warning
    show-sql: false # only set show sql to true on demand, please
  kafka:
    # global bootstrap-servers and security config, can be overwritten in consumer / producer
    security:
      # SASL_PLAINTEXT results in "firewall blocking Kafka TLS traffic" (i.e. it only allows HTTPS traffic),
      protocol: SASL_SSL # SASL_PLAINTEXT or SASL_SSL
    bootstrap-servers:
      bootstrap-servers: set-me-iup.kafka.cloud:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    properties:
      ssl:
        endpoint:
          identification:
            algorithm: https
      sasl:
        # Customize sasl.client.callback.handler.class,
        # default is org.apache.kafka.common.security.authenticator.SaslClientCallbackHandler
        # SCRAM-SHA-256 or PLAIN
        mechanism: SCRAM-SHA-256
        # place-holder, actual config should not be in version control since it contains secrets !!!
        # use SPRING_KAFKA_PROPERTIES_SASL_JAAS_CONFIG to configure via environment
        jaas:
          config: org.apache.kafka.common.security.plain.PlainLoginModule required username="<set-user>" password="<set-pw>";

  main:
    allow-bean-definition-overriding: true
    banner-mode: "off"
  mvc:
    converters:
      preferred-json-mapper: jackson
  security:
    oauth2:
      client:
        registration:
          cognito:
            #  client-id: please_overwrite_via_env
            #  client-name: please_overwrite_via_env
            #  client-secret: please_overwrite_via_env
            scope: openid
            provider: cognito
            redirectUriTemplate: http://localhost:8080/login/oauth2/code/cognito
        provider:
          cognito:
            usernameAttribute: cognito:username
            # issuer-uri: please_overwrite_via_env
            # redirectUriTemplate: http://localhost:8080/login/oauth2/code/cognito # needed?
  servlet:
    multipart:
      max-file-size: 10MB # 1MB is default
      max-request-size: 10MB # 10MB is default

  # see also AsyncConfig class
  task:
    execution:
      thread-name-prefix: angkor-task-
      pool:
        core-size: 2
        max-size: 10
        queue-capacity: 100
    scheduling:
      thread-name-prefix: angkor-scheduling-
      pool:
        size: 2
  sql:
    init:
      platform: postgres

---
# default config if no specific profile activated, suitable for local dev
spring:
  config:
    activate:
      on-profile: default
  datasource:
    url: jdbc:postgresql://localhost:5432/angkor_dev
    username: angkor_dev
    password:

---
spring:
  config:
    activate:
      on-profile: prod
  flyway:
    clean-disabled: true
  jackson:
    serialization:
      INDENT_OUTPUT: false # optimize for prod

server:
  error:
    include-message: never # disable for prod to avoid leaking of info to client (default for spring >= 2.3)

---
spring:
  config:
    activate:
      on-profile: test
  security:
    oauth2:
      client:
        registration:
          cognito:
            client-id: dummy-for-testing
            client-name: dummy-for-testing
            client-secret: dummy-for-testing
        provider:
          cognito:
            issuer-uri: dummy-for-testing
  # How to create database test data for Spring Boot applications with Flyway DB
  # https://medium.com/@jonashavers/how-to-create-database-test-data-for-spring-boot-applications-with-flyway-db-294a436db7ee
  flyway:
    locations: classpath:/db/migration,classpath:/db/testdata

---

