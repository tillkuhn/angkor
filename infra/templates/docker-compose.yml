# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
version: '3'

# Define services
services:
  # App backend service
  angkor-api:
    #    # Configuration for building the docker image for the backend service
    #    build:
    #      context: polling-app-server # Use an image built from the specified dockerfile in the `polling-app-server` directory.
    #      dockerfile: Dockerfile
    image: ${docker_user}/${appid}-api:${api_version}
    container_name: angkor-api
    # make sure vars are defined in .env which is loaded implicitly
    #  docker-compose config will show the resolved application config
    environment:
      SPRING_DATASOURCE_URL: ${db_url}
      SPRING_DATASOURCE_USERNAME: ${db_username}
      SPRING_DATASOURCE_PASSWORD: ${db_password}
      ## enable clean, only temporary as long as we still experience with db layout
      SPRING_FLYWAY_CLEAN_DISABLED: "false"
      SPRING_PROFILES_ACTIVE: "prod,clean"
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    networks:
      - api-ui

  angkor-ui:
    #    # Configuration for building the docker image for the backend service
    #    build:
    #      context: polling-app-server # Use an image built from the specified dockerfile in the `polling-app-server` directory.
    #      dockerfile: Dockerfile
    image: ${docker_user}/${appid}-ui:${ui_version}
    container_name: angkor-ui
    # make sure vars are defined in .env which is loaded implicitly
    # docker-compose config will show the resolved application config
    environment:
      SERVER_NAMES: "${server_names}"
      SERVER_NAME_PATTERN: "${certbot_domain_name}"
      MAPBOX_ACCESS_TOKEN: "${mapbox_access_token}"
      API_HOST: "angkor-api"
      API_PORT: "8080"
    ports:
      # Either specify both ports (HOST:CONTAINER), or just the container port (an ephemeral host port is chosen).
      - "80:80"
      - "443:443"
    restart: always
    volumes:
      - /etc/letsencrypt/live/${certbot_domain_name}/fullchain.pem:/etc/ssl/certs/fullchain.pem
      - /etc/letsencrypt/live/${certbot_domain_name}/privkey.pem:/etc/ssl/certs/privkey.pem
      - /etc/ssl/certs/dhparam.pem:/etc/ssl/certs/dhparam.pem
    networks:
      - api-ui

networks:
  api-ui:

# todo ${ui_version}
