# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
version: '3'

# Define services
services:

  ## App backend service
  angkor-api:
    image: ${docker_user}/${appid}-api:${api_version}
    container_name: angkor-api
    env_file: "./.env"
    # make sure vars are defined in .env which is loaded implicitly
    # docker-compose config will show the resolved application config
    environment:
      ## jdbc config
      SPRING_DATASOURCE_URL: ${db_url}
      SPRING_DATASOURCE_USERNAME: ${db_username}
      SPRING_DATASOURCE_PASSWORD: ${db_password}
      ## WARNING uncomment the following two vars to enable clean,
      ## only temporary as long as we still experience with db layout
      #### SPRING_FLYWAY_CLEAN_DISABLED: "false"
      ### SPRING_PROFILES_ACTIVE: "prod,clean"
      ## oauth config
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_COGNITO_ISSUER_URI: ${oauth2_issuer_uri}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_COGNITO_CLIENT_SECRET: ${oauth2_client_secret}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_COGNITO_CLIENT_ID: ${oauth2_client_id}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_COGNITO_CLIENT_NAME: ${oauth2_client_name}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_COGNITO_REDIRECT_URI_TEMPLATE: https://${certbot_domain_name}/login/oauth2/code/cognito
      LOGGING_LEVEL_ROOT: INFO
      ## useful? https://stackoverflow.com/questions/44491257/how-to-reduce-spring-boot-memory-usage
      ##  java -XX:+PrintFlagsFinal  -version |grep -Ei "maxheapsize|maxram" ## check on system -Xmx132m
      JAVA_OPTS: -XX:+UseSerialGC
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    volumes:
      - ./upload:/tmp/upload
    networks:
      - angkor-network

  ## App health monitoring service
  healthbells:
    image: tillkuhn/angkor-tools:latest
    container_name: healthbells
    env_file: "./.env"
    entrypoint: /tools/healthbells # overwrite since it's a shared tool image
    environment:
      HEALTHBELLS_PORT: "8091"
      HEALTHBELLS_INTERVAL: "300s"
      HEALTHBELLS_URLS: "https://${certbot_domain_name}/actuator/health,https://${certbot_domain_name}/alive,https://${certbot_domain_name}/imagine/health"
    ports:
      - "8091:8091"
    restart: always
    networks:
      - angkor-network

  ## App image and file processing service
  imagine:
    image: tillkuhn/angkor-tools:latest
    container_name: imagine
    env_file: "./.env"
    entrypoint: /tools/imagine # overwrite since it's a shared tool image
    environment:
      IMAGINE_PORT: "8090"
      IMAGINE_S3BUCKET: "${bucket_name}"
      IMAGINE_S3PREFIX: "imagine/" # todo this is already new default in recent version
      # IMAGINE_FILEPARAM: "file" # now standard uploadfile see file.service.ts
      IMAGINE_DUMPDIR: "/tmp" # use /tmp root in container, no volume mount necessary
    ports:
      - "8090:8090"
    restart: always
    networks:
      - angkor-network

  ## App frontend service
  angkor-ui:
    image: ${docker_user}/${appid}-ui:${ui_version}
    container_name: angkor-ui
    env_file: "./.env"
    # make sure vars are defined in .env which is loaded implicitly
    # docker-compose config will show the resolved application config
    environment:
      SERVER_NAMES: "${server_names}"
      SERVER_NAME_PATTERN: "${certbot_domain_name}"
      MAPBOX_ACCESS_TOKEN: "${mapbox_access_token}"
      IMPRINT_URL: "${imprint_url}"
      API_HOST: "angkor-api" # for nginx proxy_pass
      API_PORT: "8080" #  make sure it matches the part of the api service definition above
      HEALTHBELLS_HOST: "healthbells" # for nginx proxy_pass
      HEALTHBELLS_PORT: "8091" # make sure it matches the part of the healthbells service definition below
      IMAGINE_HOST: "imagine" # for nginx proxy_pass
      IMAGINE_PORT: "8090" # make sure it matches the part of the healthbells service definition below
    ports:
      # Either specify both ports (HOST:CONTAINER), or just the container port (an ephemeral host port is chosen).
      - "80:80"
      - "443:443"
    restart: always
    volumes:
      - /etc/letsencrypt/live/${certbot_domain_name}/fullchain.pem:/etc/ssl/certs/fullchain.pem
      - /etc/letsencrypt/live/${certbot_domain_name}/privkey.pem:/etc/ssl/certs/privkey.pem
      - /etc/ssl/certs/dhparam.pem:/etc/ssl/certs/dhparam.pem
      #  "." expand to the dir, where the YAML (docker-compose) file is and PWD is your current dir
      - ./docs:/www/${appid}-docs
    networks:
      - angkor-network

networks:
  angkor-network:

