# ${appid} runtime variables, see https://docs.docker.com/compose/env-file/
# Make sure all Vars on the leftward side are uppercase
# Make sure all Vars on the rightward side are mapped in file-resources.tf (locals.dotenv_content)

# Configure Main AppID and Instance / AWS related properties
APPID=${appid}
ACCOUNT_ID=${account_id}
AWS_REGION=${aws_region}
BUCKET_NAME=${bucket_name}
INSTANCE_ID=${instance_id}
PUBLIC_IP=${public_ip}
SSH_PRIVKEY_FILE=${ssh_privkey_file}

# Global Versions for frontend / backend (deprecated?)
API_VERSION=${api_version}
UI_VERSION=${ui_version}

# Configure Postgres DB (see docker-compose.yml for SPRING_DATASOURCE_* mappings)
DB_URL=${db_url}
DB_USERNAME=${db_username}
DB_API_KEY=${db_api_key}
# DB_PASSWORD now managed via HCP Vault Secrets

# Configure AWS Cognito setup (see docker-compose.yml for SPRING_SECURITY_OAUTH2* mappings)
OAUTH2_ISSUER_URI=${oauth2_issuer_uri}
OAUTH2_TOKEN_ENDPOINT=${oauth2_pool_domain}/oauth2/token
# OAUTH2_CLIENT_SECRET now managed via HCP Vault Secrets
OAUTH2_CLIENT_ID=${oauth2_client_id}
OAUTH2_CLIENT_NAME=${oauth2_client_name}
OAUTH2_CLIENT_CLI_ID=${oauth2_client_cli_id}
OAUTH2_CLIENT_CLI_SECRET=${oauth2_client_cli_secret}

# Configure Backend (API), values mapped to custom AppProperties class in our SpringBoot App
# APP_API_TOKEN now managed via HCP Vault Secrets
APP_API_TOKEN_METRICS=${api_token_metrics}
APP_EXTERNAL_BASE_URL=https://${certbot_domain_name}
APP_TOURS_API_BASE_URL=${tours_api_base_url}
APP_TOURS_API_USER_ID=${tours_api_user_id}
APP_PHOTOS_FEED_URL=${photos_feed_url}
APP_KAFKA_TOPIC_PREFIX=${kafka_topic_prefix}
APP_KAFKA_ENABLED=true
APP_ADMIN_MAIL=${certbot_mail}

# Configure SMTP Mail dynamic values (for none sensitive data, see application.yml)
SPRING_MAIL_USERNAME=${smtp_user}
SPRING_MAIL_PASSWORD=${smtp_password}
SPRING_MAIL_PROPERTIES_MAIL_SMTP_FROM=angkor-thom@${certbot_domain_name}

# Configure Shared Kafka properties, also used docker-compose.yml (SPRING_KAFKA_* variables)
# and by most Go based services
KAFKA_BROKERS=${kafka_brokers}
KAFKA_SASL_USERNAME=${kafka_sasl_username}
KAFKA_SASL_PASSWORD=${kafka_sasl_password}
KAFKA_TOPIC_PREFIX=${kafka_topic_prefix}
KAFKA_TLS_ENABLED=true
KAFKA_SASL_ENABLED=true
KAFKA_SASL_MECHANISM=SCRAM-SHA-256

# Sonar local credentials
SONAR_TOKEN=${sonar_token}
SONAR_LOGIN=${sonar_login}
SONAR_PASSWORD=${sonar_password}

# Configure Letsencrypt for nightly Certbot runs
CERTBOT_MAIL=${certbot_mail}
CERTBOT_DOMAIN_NAME=${certbot_domain_name}
CERTBOT_DOMAIN_STR="${certbot_domain_str}"
SERVER_NAMES="${server_names}"

# Configure Frontend (UI), values are envsubst in ui/Dockerfile (window-env.js)
MAPBOX_ACCESS_TOKEN=${mapbox_access_token}
IMPRINT_URL=${imprint_url}

# Configure Go Tool SQS Poller
POLLY_SLEEP_SECONDS=42
POLLY_WAIT_SECONDS=18
POLLY_DELEGATE=/home/ec2-user/appctl.sh

# Configure Go Tool Imagine for image processing
IMAGINE_JWKS_ENDPOINT=${oauth2_issuer_uri}/.well-known/jwks.json

# Configure Go Tool Remindabot endpoint + SES mail
REMINDABOT_API_URL=https://${certbot_domain_name}/api/v1/notes/reminders
REMINDABOT_SMTP_USER=${smtp_user}
REMINDABOT_SMTP_PASSWORD=${smtp_password}
REMINDABOT_SMTP_SERVER=${smtp_server}
REMINDABOT_SMTP_PORT=${smtp_port}
REMINDABOT_API_TOKEN=${remindabot_api_token}
REMINDABOT_KAFKA_GROUP_ID=${remindabot_kafka_group_id}

# Configure appctl controller script
# DB PW for backups
APPCTL_DB_PASSWORD=${appctl_db_password}
APPCTL_REPLICA_DB_URL=${appctl_replica_db_url}
# DOCKER_USER used as image prefix in docker-compose.yml
DOCKER_USER=${docker_user}

# Configure HCP Vault Secrets (required for CLI)
# https://developer.hashicorp.com/vault/tutorials/hcp-vault-secrets-get-started/hcp-vault-secrets-retrieve-secret
#HCP_ORGANIZATION=hcp_organization
#+HCP_PROJECT=hcp_project
#HCP_CLIENT_ID=hcp_client_id
#HCP_CLIENT_SECRET=hcp_client_secret
# NEW PHASE PROVIDER
PHASE_TOKEN=phase_token
PHASE_APP_ID=${phase_app_id}

# Configure nextgen Kafka Setup @Confluent (only variables *not* managed by HCP secrets)
KAFKA_BOOTSTRAP_SERVERS=${kafka_bootstrap_servers}
KAFKA_CLUSTER_ID=${kafka_cluster_id}
KAFKA_CONSUMER_GROUP_ID=app.default
KAFKA_LOG_LEVEL=debug
KAFKA_REST_ENDPOINT=${kafka_rest_endpoint}

##############################
# DEPRECATED / REMOVED KEYS
##############################
# KAFKA_PRODUCER_API_KEY and KAFKA_PRODUCER_API_SECRET managed by HCP

# Configure Dockerhub credentials for push
# removed, only have to be exchanged between gitlab and hcp vault secrets
# DOCKER_TOKEN=dollar{docker_token}

# --- END CONFIG BLOCK
