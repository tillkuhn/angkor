name: golang-ci

on:
  push:
    branches: [ master ]

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
        id: go

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # https://stackoverflow.com/a/58178121/4292075, https://stackoverflow.com/a/51761312/4292075
      - name: Pull Environment Config from AWS SSM ParamStore
        run: |
          echo "LATEST_REPO_TAG=$(git ls-remote --tags --sort='v:refname' | tail -n1 | sed 's/.*\///; s/\^{}//')" >> $GITHUB_ENV
          echo "RELEASE_NAME=$(aws ssm get-parameter --name /angkor/prod/RELEASE_NAME --with-decryption --query 'Parameter.Value' --output text)"  >> $GITHUB_ENV
          echo "RELEASE_VERSION=$(aws ssm get-parameter --name /angkor/prod/RELEASE_VERSION --with-decryption --query 'Parameter.Value' --output text)"  >> $GITHUB_ENV

      # install sonar scanner, we handle this ourselves
      - name: Cache node modules
        uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2.2.0
        with:
          node-version: ${{ matrix.node-version }}

      - name: yarn npm install and run build
        working-directory: ./tools/sonar/
        run: |
          npm install

      # https://github.com/actions/cache/blob/main/examples.md#go---modules
      - name: Cache Go modules packages
        uses: actions/cache@v2.1.6
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build with Go
        working-directory: ./tools
        run: |
          make build
          SONAR_TOKEN=$(aws ssm get-parameter --name /angkor/prod/SONAR_TOKEN --with-decryption --query 'Parameter.Value' --output text)
          echo "Running sonar"
          SONAR_TOKEN=$SONAR_TOKEN make sonar
          # all tools are pushed to dockerhub, but we (still) need polly binary for systemd service
          aws s3 cp --no-progress dist/polly ${{ secrets.AWS_DEPLOY_TARGET }}/tools/polly
        env:
          CI: true
          RELEASE_NAME: ${{ env.RELEASE_NAME }}
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Sonarcloud: Needed to get PR information, if any

      - name: Lint Dockerfile with hadolint
        uses: brpaz/hadolint-action@v1.5.0
        with:
          dockerfile: ./tools/Dockerfile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} # Password or personal access token used to log in to a Docker registry. If not set then no login will occur.

      - name: Push to DockerHub
        uses: docker/build-push-action@v2 # https://github.com/docker/build-push-action
        with:
          context: ./tools
          file: ./tools/Dockerfile
          platforms: linux/arm64,linux/amd64 #linux/amd64,linux/386
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/angkor-tools:latest
          build-args: |
            RELEASE_NAME: ${{ env.RELEASE_NAME }}
            RELEASE_VERSION: ${{ env.RELEASE_VERSION }}

      # https://stackoverflow.com/questions/39371572/shorthand-syntax-for-message-attributes-in-the-send-message-command-in-aws-cli-f
      # https://docs.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables
      - name: Publish Action Event
        run: |
          aws sns publish --topic-arn $TOPIC_ARN --message "{\"action\":\"deploy-tools\",\"workflow\":\"$GITHUB_WORKFLOW\"}" \
              --message-attributes "GITHUB_SHA={DataType=String,StringValue=\"$GITHUB_SHA\"}, GITHUB_RUN_ID={DataType=String,StringValue=\"$GITHUB_RUN_ID\"}"
        env:
          TOPIC_ARN: ${{ secrets.TOPIC_ARN }}
